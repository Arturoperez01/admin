{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/_auth/auth.guard.ts","webpack:///./src/app/_auth/auth.interceptor.ts","webpack:///./src/app/_auth/authentication.service.ts","webpack:///./src/app/_auth/current-user.ts","webpack:///./src/app/_auth/index.ts","webpack:///./src/app/_auth/login/login-form.component.ts","webpack:///./src/app/_config/config.ts","webpack:///./src/app/_directives/alert.component.html","webpack:///./src/app/_directives/alert.component.ts","webpack:///./src/app/_directives/index.ts","webpack:///./src/app/_models/user/index.ts","webpack:///./src/app/_models/user/user-config.ts","webpack:///./src/app/_models/user/user.base.ts","webpack:///./src/app/_models/user/user.ts","webpack:///./src/app/_services/alert.service.ts","webpack:///./src/app/_services/index.ts","webpack:///./src/app/_services/roles.service.ts","webpack:///./src/app/_services/user.service.ts","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.scss","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/material.module.ts","webpack:///./src/app/pagenotfound.component.ts","webpack:///./src/app/shared.module.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["var map = {\n\t\"./dashboard/dashboard.module\": [\n\t\t\"./src/app/dashboard/dashboard.module.ts\",\n\t\t\"dashboard-dashboard-module\"\n\t],\n\t\"./dashboard/loginPage/loginPage.module\": [\n\t\t\"./src/app/dashboard/loginPage/loginPage.module.ts\",\n\t\t\"dashboard-loginPage-loginPage-module\"\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tvar ids = map[req];\n\tif(!ids) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\tvar id = ids[0];\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";\nmodule.exports = webpackAsyncContext;","\r\nimport { CanActivate, Router, ActivatedRouteSnapshot, RouterStateSnapshot, CanActivateChild, Route } from '@angular/router';\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { AuthenticationService } from './authentication.service';\r\nimport { store } from './';\r\nimport { Observable } from 'rxjs';\r\nimport { User } from '../_models/user/';\r\n\r\n/**\r\n * This class intercept route change and check for security\r\n */\r\n@Injectable({\r\n    providedIn: 'root',\r\n  })\r\nexport class AuthGuard implements CanActivate, CanActivateChild {\r\n    constructor(\r\n        private router: Router,\r\n        //private http: HttpClient,\r\n        private authenticationService: AuthenticationService\r\n    ) { }\r\n\r\n    /**\r\n     * Check routes permission\r\n     */\r\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> | boolean {\r\n\r\n        // Get authorized roles for route\r\n        const roles = [];\r\n        Object.keys(route.data).forEach(key => roles.push(route.data[key]));\r\n\r\n        // Return observable\r\n        return new Observable<boolean>((ob: any) => {\r\n            // Get logged user\r\n            \r\n            this.authenticationService.getUser().subscribe(user => {\r\n                if (!user) {\r\n                    // Not logged\r\n                    ob.next(false);\r\n                    ob.complete();\r\n                    this.redirectAdmin(roles);\r\n                } else {\r\n                    // Logged user\r\n                    const userObj: User = new User(user._id, user.username, user.token, user.roles);\r\n                    if (roles && roles.length > 0) {\r\n                        // Check roles\r\n                        if (userObj.hasRole(roles)) {\r\n                            ob.next(true);\r\n                            ob.complete();\r\n                        } else {\r\n                            ob.next(false);\r\n                            ob.complete();\r\n                            this.redirectAdmin(roles);\r\n\r\n                        }\r\n                    }\r\n                    ob.next(true);\r\n                    ob.complete();\r\n                }\r\n            });//*/\r\n        });\r\n    }\r\n    \r\n    redirectAdmin(roles){\r\n        if(roles.find(rol=>rol==\"ADMIN\")){\r\n            this.router.navigate(['/login']);\r\n        }\r\n    }\r\n    canActivateChild(\r\n        route: ActivatedRouteSnapshot,\r\n        state: RouterStateSnapshot\r\n    ): Observable<boolean>|Promise<boolean>|boolean {\r\n        return this.canActivate(route, route.params.id);\r\n    }\r\n    \r\n    canLoad(route: Route): boolean {\r\n        let url = `/${route.path}`;\r\n        return this.checkLogin(url);\r\n      }\r\n    \r\n      checkLogin(url: string): boolean {\r\n        let found = true;// this.authenticationService.isLoggedIn ;\r\n\r\n        if (found) { return true; }\r\n        return false;\r\n    /*\r\n        // Store the attempted URL for redirecting\r\n        this.authenticationService.redirectUrl = url;\r\n    \r\n        // Create a dummy session id\r\n        let sessionId = 123456789;\r\n    \r\n        // Set our navigation extras object\r\n        // that contains our global query params and fragment\r\n        let navigationExtras: NavigationExtras = {\r\n          queryParams: { 'session_id': sessionId },\r\n          fragment: 'anchor'\r\n        };\r\n    \r\n        // Navigate to the login page with extras\r\n        this.router.navigate(['/login'], navigationExtras);\r\n        return false;\r\n        //*/\r\n      }\r\n  //*/    \r\n}\r\n","\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpInterceptor, HttpRequest, HttpHandler, HttpEvent } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\n/**\r\n * This interceptor get token from sessionStorage if it is set and put the JWT token in the header Authorization var\r\n */\r\n@Injectable()\r\nexport class AuthInterceptor implements HttpInterceptor {\r\n    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n\r\n        // Get token\r\n        const token = sessionStorage.getItem('token') || localStorage.getItem('token');\r\n        if (token) {\r\n            const cloned = req.clone({\r\n                headers: req.headers.set('Authorization', 'Bearer ' + token)\r\n            });\r\n            return next.handle(cloned);\r\n        } else {\r\n            return next.handle(req);\r\n        }\r\n    }\r\n}\r\n","\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { User } from '../_models/user';\r\nimport { store } from './current-user';\r\nimport { Router } from '@angular/router';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { environment } from '../../environments/environment'\r\nimport { shareReplay, map, tap } from 'rxjs/operators';\r\n\r\n/**\r\n * This service manage the Authentication\r\n */\r\n@Injectable({\r\n    providedIn: 'root',\r\n  })\r\nexport class AuthenticationService {\r\n    isLoggedIn = false;\r\n    contextUrl: string = environment.endpoint;//+'user';\r\n\r\n    constructor(\r\n        //private securityService: SecurityService,\r\n        private router: Router,\r\n        private http: HttpClient\r\n    ) { }\r\n\r\n    /**\r\n     * Get the logged user\r\n     */\r\n    public getUser(): Observable<User> {\r\n        return new Observable<User>((ob: any) => {\r\n\r\n            // Get JWT token from browser storage\r\n            let token = sessionStorage.getItem('token') || localStorage.getItem('token');\r\n\r\n            // Get user from store\r\n            store.currentUser$.subscribe(user => {\r\n                if (token && user) {\r\n                    // User logged and stored token\r\n                    //this.isLoggedIn = true; \r\n                    //console.log(this.isLoggedIn);this.isLoggedIn = true;console.log(this.isLoggedIn)\r\n                    ob.next(user);\r\n                } else if (token && !user) {\r\n                    // If refresh page and have token but not logged user\r\n                    // Verify token and get user\r\n                    this.verifyToken(token).subscribe(\r\n                        usr => {\r\n                            if (!usr || (!usr._id && !usr.success)) {\r\n                                ob.next(undefined);\r\n                            } else {\r\n                                //this.isLoggedIn = true; \r\n                                //console.log(this.isLoggedIn);this.isLoggedIn = true;console.log(this.isLoggedIn)\r\n                                store.setUser(usr);\r\n                                ob.next(usr);\r\n                            }\r\n                        }\r\n                    );\r\n                } else {\r\n                    // Logged user\r\n                    ob.next(user);\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Logout function\r\n     */\r\n    logout() {\r\n        // Clear token and remove user from local storage to log user logout\r\n        localStorage.removeItem('token');\r\n        sessionStorage.removeItem('token');\r\n        store.setUser(null);\r\n    }\r\n\r\n    /**\r\n     * Login by username and SHA-3 password\r\n     *\r\n     * @param {string} username username for login\r\n     * @param {string} password password in SHA-3\r\n     * @param {boolean} remember store token in local storage\r\n     * @returns {Observable<User>} logged user\r\n     */\r\n    login(username: string, password: string, remember: boolean): Observable<User> {\r\n        return this.http.post<User>(this.contextUrl + '/login', { username: username, password: password })\r\n            .pipe(\r\n                tap(user => {this.isLoggedIn=true}),\r\n                tap(user => {this.setSession(user.token);}),\r\n                tap(user => { if (remember) this.setLocal(user.token);}),\r\n                map(user => user),\r\n                shareReplay()\r\n            );\r\n    }\r\n\r\n    /**\r\n     * Sign up \r\n     */\r\n    register(user: User): Observable<User> {\r\n        return this.http.post<User>(`${this.contextUrl}/user/signup`, user)\r\n        .pipe(\r\n            tap(user => this.setSession(user.token)),\r\n            map(user => user),\r\n            shareReplay()\r\n        );\r\n        /*\r\n        .pipe(map(data  => { data })\r\n        );\r\n        //*/\r\n    }\r\n    /**\r\n     * Verify JWT token\r\n     *\r\n     * @param {string} token JWT token to verify\r\n     * @returns {Observable<any>} logged user or error message\r\n     */\r\n    verifyToken(token: string): Observable<any> {\r\n        return this.http.post<any>(this.contextUrl + '/verifyToken', { token: token })\r\n            .pipe(\r\n                map(user => user)\r\n            );\r\n    }\r\n\r\n    /**\r\n     * Change password of current user\r\n     *\r\n     * @param {string} passwordNew New password to set in SHA-3\r\n     * @param {string} passwordOld Old password to check in SHA-3\r\n     * @returns {Observable<void>} Success or error\r\n     */\r\n    changePassword(passwordNew: string, passwordOld: string): Observable<void> {\r\n        return this.http\r\n            .post<void>(this.contextUrl + '/changePassword', {\r\n                passwordNew: passwordNew,\r\n                passwordOld: passwordOld\r\n            })\r\n            .pipe(\r\n                map(response => response)\r\n            );\r\n    }\r\n\r\n    /**\r\n     * Set token in sessionStorage\r\n     *\r\n     * @private\r\n     * @param {*} token JWT token to set in sessionStorage\r\n     */\r\n    private setSession(token) {\r\n        sessionStorage.setItem('token', token);\r\n    }\r\n\r\n    /**\r\n     * Set token in localStorage\r\n     *\r\n     * @private\r\n     * @param {*} token JWT token to set in localStorage\r\n     */\r\n    private setLocal(token) {\r\n        localStorage.setItem('token', token);\r\n    }\r\n}","\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { User } from '../_models/user/user';\r\nimport * as _ from 'lodash';\r\n\r\n/**\r\n * Store the current user\r\n */\r\nclass CurrentUser {\r\n    private currentUserSubject = new BehaviorSubject(null);\r\n    public currentUser$: Observable<User> = this.currentUserSubject.asObservable();\r\n\r\n    setUser(user: User) {\r\n        this.currentUserSubject.next(_.cloneDeep(user));\r\n    }\r\n}\r\n\r\nexport const store = new CurrentUser();\r\n","export * from './auth.guard'\r\nexport * from './authentication.service'\r\nexport * from './auth.interceptor'\r\nexport * from './current-user'","import { Input, Component, Output, EventEmitter } from '@angular/core';\r\nimport { FormGroup, FormControl} from '@angular/forms';\r\nimport SHA3 from 'sha3';\r\nimport { store } from '../../../app/_auth/current-user';\r\nimport { User } from '../../_models/user/user';\r\nimport { AuthenticationService } from '../authentication.service';\r\n\r\n@Component({\r\n  selector: 'my-login-form',\r\n  template: `\r\n  <form  [formGroup]=\"form\" (ngSubmit)=\"submit()\">\r\n  \r\n    <p class=\"h4 mb-4\">Sign in </p>\r\n  \r\n    <!-- Email -->\r\n    <div class=\"form-group \">\r\n    <label class=\"pull-left\">Correo</label>\r\n    <input type=\"email\" id=\"defaultLoginFormEmail\" formControlName=\"username\"  class=\"form-control mb-4\" placeholder=\"E-mail\" >\r\n    </div>\r\n  \r\n    <!-- Password -->\r\n    <div class=\"form-group \">\r\n    <label class=\"pull-left\">Password</label>\r\n    <input type=\"password\" id=\"defaultLoginFormPassword\" formControlName=\"password\"  class=\"form-control mb-4\" placeholder=\"Password\" >\r\n    </div>\r\n  \r\n    <div class=\"form-group \">\r\n    <input type=\"checkbox\" class=\"pull-right mt-8\" formControlName=\"remember\" name=\"remember\">\r\n    <label class=\"pull-right\">Remember login&nbsp;</label>\r\n    </div>\r\n    <!-- Sign in button -->\r\n    <button mdbBtn color=\"info\" block=\"true\" class=\"my-4\" type=\"submit\" >Sign in</button>\r\n  </form>\r\n  `,\r\n\r\n})\r\nexport class LoginFormComponent {\r\n  @Input() error: string | null;\r\n\r\n  @Output() submitEM = new EventEmitter<any>();\r\n\r\n  user: User = new User(null, null, null, null);\r\n  form: FormGroup = new FormGroup({\r\n    username: new FormControl(''),\r\n    password: new FormControl(''),\r\n    remember: new FormControl(''),\r\n  });//*/\r\n  constructor( //private securityService: SecurityService,\r\n            private authenticationService: AuthenticationService) {\r\n  }\r\n  submit() {\r\n    if (this.form.valid) {\r\n        const hash = new SHA3(512);\r\n        hash.update(this.form.value.password);\r\n\r\n        const sha3pass = hash.digest('hex');\r\n        this.authenticationService.login(this.form.value.username, sha3pass, this.form.value.remember)\r\n        .subscribe(\r\n            data => {\r\n                this.setUser(data);   \r\n                \r\n                //this.submitEM.emit(this.authenticationService.isLoggedIn);\r\n                this.submitEM.emit(data);\r\n                //this.router.navigate([this.returnUrl]);\r\n            },\r\n            error => {\r\n                //this.submitEM.emit(this.authenticationService.isLoggedIn);\r\n                this.submitEM.emit(error);\r\n                //console.log(error);\r\n                //this.setMessage(error);\r\n                //this.alertService.error(error);\r\n                //this.loading = false;\r\n            });\r\n      //store.setUser(user);\r\n    }\r\n  }\r\n  \r\n  private setUser(user: User) {\r\n      store.setUser(user);\r\n  }\r\n  //*/\r\n}","\r\nexport const GLOBAL = {\r\n    \r\n    \"url\": \"http://localhost:8000/api/\",\r\n    \"urlproject1\": \"http://localhost:8000/\",\r\n    \"url1\": \"http://localhost:8000/\"\r\n}","module.exports = \"<div *ngIf=\\\"message\\\" [ngClass]=\\\"{ 'alert': message, 'alert-success': message.type === 'success', 'alert-danger': message.type === 'error' }\\\">{{message.text}}</div>\\r\\n\"","import { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\n\r\nimport { AlertService } from '../_services';\r\n\r\n@Component({\r\n    selector: 'alert',\r\n    templateUrl: 'alert.component.html'\r\n})\r\n\r\nexport class AlertComponent implements OnInit, OnDestroy {\r\n    private subscription: Subscription;\r\n    message: any;\r\n\r\n    constructor(private alertService: AlertService) { }\r\n\r\n    ngOnInit() {\r\n        this.subscription = this.alertService.getMessage().subscribe(message => { \r\n            this.message = message; \r\n        });\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.subscription.unsubscribe();\r\n    }\r\n}","export * from \"./alert.component\";","export * from \"./user-config\";\r\nexport * from \"./user.base\";\r\nexport * from \"./user\";","import { UserBase } from \"./user.base\";\r\nimport { Injectable } from '@angular/core';\r\nimport { Validators } from '@angular/forms';\r\nimport {FieldConfig} from \"../../_directives/dynamic-form/models/field-config.interface\";\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { Roles } from '../roles/roles';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n\r\n//Campos necesarios\r\nconst config: FieldConfig[] = [\r\n  {\r\n    type: 'input',\r\n    label: 'Nombre del usuario',\r\n    name: 'username',\r\n    placeholder: 'Introduzca el nombre',\r\n    validation: [Validators.required]\r\n  },\r\n  {\r\n    type: 'input',\r\n    label: 'Nombre completo',\r\n    name: 'name',\r\n    placeholder: 'Introduzca el nombre',\r\n    validation: [Validators.required]\r\n  },\r\n  {\r\n    type: 'input',\r\n    label: 'Correo electronico',\r\n    name: 'mail',\r\n    placeholder: 'Introduzca correo',\r\n    validation: [Validators.required,Validators.email]\r\n  },\r\n  {\r\n    type: 'password',\r\n    label: 'contraseña',\r\n    name: 'password',\r\n    placeholder: 'Introduzca contraseña',\r\n    validation: [Validators.required, Validators.minLength(8), Validators.maxLength(8)]\r\n  },\r\n  {\r\n    type: 'multiselect',\r\n    label: 'Tipo de usuario',\r\n    name: 'roles',\r\n    options: [],\r\n    placeholder: 'Escoja el tipo de usuario',\r\n    validation: [Validators.required],\r\n    value: []\r\n  },\r\n  {\r\n    label: 'Submit',\r\n    name: 'submit',\r\n    type: 'button'\r\n  },\r\n];\r\n\r\n@Injectable()\r\nexport class UserConfig  {\r\n  //get config() { return config.filter(({type}) => type !== 'button'); }\r\n\r\n  contextUrl = environment.endpoint;\r\n  user;\r\n  roles;\r\n    constructor(\r\n        private http: HttpClient\r\n      ){\r\n        this.user = config;\r\n        this.getRoles();\r\n        console.log(this.user)\r\n      }\r\n  \r\n  \r\n  private getRoles(): void{\r\n    this.http.get<Roles[]>(`${this.contextUrl}`+'/roles')\r\n    .subscribe(data => {\r\n      this.user=config.filter(\r\n          (userConfig)=>{\r\n            if(\"roles\"==userConfig.name){\r\n              userConfig.options = data.map((a,i)=>{return {key: a[\"name\"], name:a[\"name\"]}});\r\n              userConfig.value   = userConfig.options.map(a=>a.name);\r\n            }\r\n            return userConfig\r\n          }\r\n      )\r\n    });\r\n  };    \r\n\r\n  //setValues(user: UserBase){\r\n  setValues({...user}){\r\n    Object.keys(user).forEach(key=>\r\n                              this.user=config.filter(\r\n                                        (userConfig)=>{\r\n                                          if(key==userConfig.name){\r\n                                            userConfig.value = user[key];\r\n                                            return userConfig.value\r\n                                          }\r\n                                        }\r\n                                    )\r\n                              )\r\n    }\r\n\r\n    config(){\r\n      return this.user;\r\n    }\r\n  }\r\n","export class UserBase {\r\n\r\n    constructor() { }\r\n\r\n    public _id: string;\r\n    public mail?: string;\r\n    public name?: string;\r\n    public password: string;\r\n    public roles?: string[];\r\n    public surname?: string;\r\n    public username: string;\r\n\r\n}","\r\nimport { UserBase } from './user.base';\r\n\r\n/**\r\n * YOU CAN OVERRIDE HERE UserBase.ts\r\n */\r\nexport class User extends UserBase {\r\n\r\n    // Insert here your custom attributes and function\r\n\r\n    // Functions for User\r\n\r\n    public token: string;\r\n\r\n    constructor(\r\n        _id?: string,\r\n        username?: string,\r\n        token?: string,\r\n        roles?: string[]\r\n    ) {\r\n        super();\r\n        this._id = _id;\r\n        this.username = username;\r\n        this.token = token;\r\n        this.roles = roles;\r\n    }\r\n\r\n    // UTILS FUNCTIONS\r\n\r\n    /**\r\n     * Check if logged user is admin\r\n     */\r\n    isAdmin(): boolean {\r\n        if (!this.roles)\r\n            return false;\r\n        return this.roles.indexOf('ADMIN') === 0;\r\n    }\r\n\r\n    /**\r\n     * Check if logged user has one role\r\n     */\r\n    hasRole(role: string | Array<string>): boolean {\r\n        if (!this.roles) return false;\r\n\r\n        if (typeof role === 'string') {\r\n            return (this.roles.indexOf(role) !== -1);\r\n        } else {\r\n            const found = role.filter(rol => {\r\n                return (this.roles.indexOf(rol) !== -1);\r\n            });\r\n            return found.length > 0;\r\n        }\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Router, NavigationStart } from '@angular/router';\r\nimport { Observable, Subject } from 'rxjs';\r\n\r\n@Injectable()\r\nexport class AlertService {\r\n    private subject = new Subject<any>();\r\n    private keepAfterNavigationChange = false;\r\n\r\n    constructor(private router: Router) {\r\n        // clear alert message on route change\r\n        router.events.subscribe(event => {\r\n            if (event instanceof NavigationStart) {\r\n                if (this.keepAfterNavigationChange) {\r\n                    // only keep for a single location change\r\n                    this.keepAfterNavigationChange = false;\r\n                } else {\r\n                    // clear alert\r\n                    this.subject.next();\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    success(message: string, keepAfterNavigationChange = false) {\r\n        this.keepAfterNavigationChange = keepAfterNavigationChange;\r\n        this.subject.next({ type: 'success', text: message });\r\n    }\r\n\r\n    error(message: string, keepAfterNavigationChange = false) {\r\n        this.keepAfterNavigationChange = keepAfterNavigationChange;\r\n        this.subject.next({ type: 'error', text: message });\r\n    }\r\n\r\n    getMessage(): Observable<any> {\r\n        return this.subject.asObservable();\r\n    }\r\n}","export * from './alert.service';\r\nexport * from './user.service';\r\nexport * from './roles.service';","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { Roles } from '../_models/roles/roles';\r\nimport { GLOBAL as config } from '../_config/config';\r\n//import { config } from 'rxjs';\r\n\r\n@Injectable()\r\nexport class RolesService {\r\n    constructor(private http: HttpClient) { \r\n                }\r\n\r\n    contextUrl: string = config.url+'roles';\r\n\r\n    getAll(): Observable<Roles[]> {\r\n        return this.http.get<Roles[]>(`${this.contextUrl}`)\r\n        .pipe(map(data => data));\r\n    }\r\n\r\n    getById(id: string): Observable<Roles> {\r\n        return this.http\r\n        .get<Roles>(`${this.contextUrl}/` + id)\r\n        .pipe(map(data => data));\r\n    }\r\n\r\n    register(roles: Roles): Observable<Roles> {\r\n        return this.http.post<Roles>(`${this.contextUrl}/`, roles)\r\n        .pipe(map(data => data));;\r\n    }\r\n\r\n    update(roles: Roles) {\r\n        return this.http.put(`${this.contextUrl}/` + roles._id, roles)\r\n        .pipe(map(data => data));\r\n    }\r\n\r\n    delete(id: string): Observable<void> {\r\n        return this.http.delete<void>(`${this.contextUrl}/` + id)\r\n        .pipe(map(data => data));\r\n    }\r\n}","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { User } from '../_models/user';\r\nimport { GLOBAL as config } from '../_config/config';\r\n//import { config } from 'rxjs';\r\n\r\n@Injectable()\r\nexport class UserService {\r\n    constructor(private http: HttpClient) { \r\n                }\r\n\r\n    contextUrl: string = config.url+'user';\r\n\r\n    getAll(): Observable<User[]> {\r\n        return this.http.get<User[]>(`${this.contextUrl}`)\r\n        .pipe(map(data => data));\r\n    }\r\n\r\n    getById(id: string): Observable<User> {\r\n        return this.http\r\n        .get<User>(`${this.contextUrl}/` + id)\r\n        .pipe(map(data => data));\r\n    }\r\n\r\n    register(user: User): Observable<User> {\r\n        return this.http.post<User>(`${this.contextUrl}/`, user)\r\n        .pipe(map(data => data));;\r\n    }\r\n\r\n    update(user: User) {\r\n        return this.http.post(`${this.contextUrl}/` + user._id, user)\r\n        .pipe(map(data => data));\r\n    }\r\n\r\n    delete(id: string): Observable<void> {\r\n        return this.http.delete<void>(`${this.contextUrl}/` + id)\r\n        .pipe(map(data => data));\r\n    }\r\n\r\n    changePassword(...params: any[] ): Observable<any> {\r\n        return this.http.put(`${this.contextUrl}/{id}/changePassword`, {})\r\n        .pipe(\r\n            map(response => response)\r\n        );\r\n    }\r\n}","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { AuthGuard }         from './_auth/auth.guard';\r\nimport { LoginPageComponent } from \"./dashboard/loginPage/loginPage.component\";\r\nimport { PageNotFoundComponent } from \"./pagenotfound.component\";\r\nconst routes: Routes = [\r\n  //*/,\r\n  {\r\n    path: 'login',\r\n    loadChildren: './dashboard/loginPage/loginPage.module#loginPageModule',\r\n    //component: LoginPageComponent\r\n  },//*/,\r\n  {\r\n    path: '',\r\n    loadChildren: './dashboard/dashboard.module#DashboardModule',\r\n    canLoad: [AuthGuard]\r\n  },\r\n  { path: '**', component: PageNotFoundComponent }\r\n  \r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n","module.exports = \"<!--The content below is only a placeholder and can be replaced.-->\\r\\n\\r\\n<router-outlet></router-outlet>\\r\\n\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FwcC5jb21wb25lbnQuc2NzcyJ9 */\"","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss']\r\n})\r\nexport class AppComponent {\r\n  title = 'picasino-app';\r\n}\r\n","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule, CUSTOM_ELEMENTS_SCHEMA, NO_ERRORS_SCHEMA} from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\n//import { AuthenticationService } from './_auth/authentication.service';\r\nimport {RolesService} from './_services'\r\nimport { SharedModule } from './shared.module';\r\nimport { LoginPageComponent } from \"./dashboard/loginPage/loginPage.component\";\r\n\r\n//import { AuthGuard, AuthInterceptor, AuthenticationService}  from  './_auth'\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent\r\n  ],\r\n  imports: [\r\n    //...APP_MODULE_IMPORTS,\r\n    //MaterialModule,\r\n    \r\n    SharedModule,\r\n    BrowserModule,\r\n    BrowserAnimationsModule,    \r\n    AppRoutingModule,\r\n    FormsModule\r\n  ],\r\n  providers: [RolesService\r\n    // SECURITY\r\n    /*\r\n    AuthGuard,\r\n    AuthenticationService,\r\n    SecurityService//*/\r\n    ],\r\n  exports: [],\r\n  bootstrap: [AppComponent],\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA,NO_ERRORS_SCHEMA]\r\n})\r\nexport class AppModule { }\r\n","import { NgModule } from '@angular/core';\r\n\r\n//import { BrowserModule } from '@angular/platform-browser';\r\nimport {\r\n    MatAutocompleteModule,\r\n    MatBadgeModule,\r\n    MatBottomSheetModule,\r\n    MatButtonModule,\r\n    MatButtonToggleModule,\r\n    MatCardModule,\r\n    MatCheckboxModule,\r\n    MatChipsModule,\r\n    MatDatepickerModule,\r\n    MatDialogModule,\r\n    MatDividerModule,\r\n    MatExpansionModule,\r\n    MatGridListModule,\r\n    MatIconModule,\r\n    MatInputModule,\r\n    MatListModule,\r\n    MatMenuModule,\r\n    MatNativeDateModule,\r\n    MatPaginatorModule,\r\n    MatProgressBarModule,\r\n    MatProgressSpinnerModule,\r\n    MatRadioModule,\r\n    MatRippleModule,\r\n    MatSelectModule,\r\n    MatSidenavModule,\r\n    MatSliderModule,\r\n    MatSlideToggleModule,\r\n    MatSnackBarModule,\r\n    MatSortModule,\r\n    MatStepperModule,\r\n    MatTableModule,\r\n    MatTabsModule,\r\n    MatToolbarModule,\r\n    MatTooltipModule,\r\n    MatTreeModule,\r\n  } from '@angular/material';\r\n\r\n  const modules = [\r\n    MatAutocompleteModule,\r\n    MatBadgeModule,\r\n    MatBottomSheetModule,\r\n    MatButtonModule,\r\n    MatButtonToggleModule,\r\n    MatCardModule,\r\n    MatCheckboxModule,\r\n    MatChipsModule,\r\n    MatDatepickerModule,\r\n    MatDialogModule,\r\n    MatDividerModule,\r\n    MatExpansionModule,\r\n    MatGridListModule,\r\n    MatIconModule,\r\n    MatInputModule,\r\n    MatListModule,\r\n    MatMenuModule,\r\n    MatNativeDateModule,\r\n    MatPaginatorModule,\r\n    MatProgressBarModule,\r\n    MatProgressSpinnerModule,\r\n    MatRadioModule,\r\n    MatRippleModule,\r\n    MatSelectModule,\r\n    MatSidenavModule,\r\n    MatSliderModule,\r\n    MatSlideToggleModule,\r\n    MatSnackBarModule,\r\n    MatSortModule,\r\n    MatStepperModule,\r\n    MatTableModule,\r\n    MatTabsModule,\r\n    MatToolbarModule,\r\n    MatTooltipModule,\r\n    MatTreeModule,\r\n  ];\r\n  \r\n@NgModule({\r\n    imports: modules,\r\n    exports: modules,\r\n  })\r\n  export class MaterialModule {}\r\n  ","import { Component }        from '@angular/core';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-pagenotfound',\r\n  template: '<h2>Page not found</h2>'\r\n})\r\nexport class PageNotFoundComponent {\r\n\r\n\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { HttpClientModule } from '@angular/common/Http';\r\nimport { LoginFormComponent } from './_auth/login/login-form.component'\r\nimport { MDBBootstrapModule } from 'angular-bootstrap-md';\r\nimport { MaterialModule } from './material.module';\r\nimport { AlertService, UserService } from './_services'\r\nimport { AuthInterceptor }  from  './_auth'\r\nimport { AlertComponent } from './_directives'\r\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\r\nimport { DynamicFormModule } from './dynamic-form.module';\r\nimport { PageNotFoundComponent } from \"./pagenotfound.component\";\r\n\r\n@NgModule({\r\n imports:      [ CommonModule,\r\n                 ReactiveFormsModule,\r\n                 HttpClientModule,\r\n                 MaterialModule,\r\n                 MDBBootstrapModule.forRoot() ],\r\n declarations: [  AlertComponent,\r\n                  LoginFormComponent,\r\n                  PageNotFoundComponent\r\n                 ],\r\n providers:    [ \r\n                {\r\n                provide : HTTP_INTERCEPTORS,\r\n                useClass: AuthInterceptor,\r\n                multi   : true,\r\n                },\r\n                AlertService,\r\n                UserService ],\r\n exports:      [ \r\n                 AlertComponent,\r\n                 PageNotFoundComponent,\r\n                 CommonModule, \r\n                 FormsModule,\r\n                 MaterialModule,\r\n                 LoginFormComponent\r\n                  ]\r\n})\r\nexport class SharedModule { }","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false,\r\n  endpoint: 'http://localhost:8000/api'\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n"],"sourceRoot":""}